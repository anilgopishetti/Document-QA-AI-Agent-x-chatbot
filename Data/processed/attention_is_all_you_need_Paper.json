{
  "doc_id": "ae8ecd3b-7bb0-4834-adfb-0b1481f24c2f",
  "filename": "attention_is_all_you_need_Paper.pdf",
  "title": "Attention is All you Need",
  "metadata": {
    "title": "Attention is All you Need",
    "author": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz Kaiser, Illia Polosukhin",
    "subject": "Neural Information Processing Systems http://nips.cc/",
    "producer": "PyPDF2",
    "creationDate": "",
    "modDate": "D:20180212212210-08'00'",
    "num_pages": 11
  },
  "sections": [
    {
      "section_id": "457a281a-a559-4b54-920c-a3e90472e10c",
      "heading": "Attention Is All You Need",
      "text": "Ashish Vaswani∗Google Brainavaswani@google.com\n\nNoam Shazeer∗Google Brainnoam@google.com\n\nNiki Parmar∗Google Researchnikip@google.com\n\nJakob Uszkoreit∗Google Researchusz@google.com\n\nLlion Jones∗Google Researchllion@google.com\n\nAidan N. Gomez∗†University of Torontoaidan@cs.toronto.edu\n\nŁukasz Kaiser∗Google Brainlukaszkaiser@google.com\n\nIllia Polosukhin∗‡illia.polosukhin@gmail.com",
      "start_page": 1,
      "end_page": 1
    },
    {
      "section_id": "80c7291f-8554-453c-ada6-f5c6c675ccba",
      "heading": "Abstract",
      "text": "",
      "start_page": 1,
      "end_page": 1
    },
    {
      "section_id": "29169964-403d-47d6-9d96-7f61bc418f1e",
      "heading": "The dominant sequence transduction models are based on complex recurrent orconvolutional neural networks that include an encoder and a decoder. The bestperforming models also connect the encoder and decoder through an attentionmechanism. We propose a new simple network architecture, the Transformer,based solely on attention mechanisms, dispensing with recurrence and convolutionsentirely. Experiments on two machine translation tasks show these models tobe superior in quality while being more parallelizable and requiring signiﬁcantlyless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, includingensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,our model establishes a new single-model state-of-the-art BLEU score of 41.0 aftertraining for 3.5 days on eight GPUs, a small fraction of the training costs of thebest models from the literature.",
      "text": "",
      "start_page": 1,
      "end_page": 1
    },
    {
      "section_id": "7f0e0650-0268-4e84-8eed-0dc1fd8bfc19",
      "heading": "1Introduction",
      "text": "",
      "start_page": 1,
      "end_page": 1
    },
    {
      "section_id": "7a14e677-8820-4e8c-bc7c-d4d30b2d403b",
      "heading": "Recurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networksin particular, have been ﬁrmly established as state of the art approaches in sequence modeling andtransduction problems such as language modeling and machine translation [29, 2, 5]. Numerousefforts have since continued to push the boundaries of recurrent language models and encoder-decoderarchitectures [31, 21, 13].",
      "text": "∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and startedthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the ﬁrst Transformer models andhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-headattention and the parameter-free position representation and became the other person involved in nearly everydetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase andtensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, andefﬁcient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of andimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively acceleratingour research.†Work performed while at Google Brain.‡Work performed while at Google Research.\n\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.",
      "start_page": 1,
      "end_page": 1
    },
    {
      "section_id": "970dadea-cd17-4e80-92a6-9eaebe726894",
      "heading": "Recurrent models typically factor computation along the symbol positions of the input and outputsequences. Aligning the positions to steps in computation time, they generate a sequence of hiddenstates ht, as a function of the previous hidden state ht−1 and the input for position t. This inherentlysequential nature precludes parallelization within training examples, which becomes critical at longersequence lengths, as memory constraints limit batching across examples. Recent work has achievedsigniﬁcant improvements in computational efﬁciency through factorization tricks [18] and conditionalcomputation [26], while also improving model performance in case of the latter. The fundamentalconstraint of sequential computation, however, remains.",
      "text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-tion models in various tasks, allowing modeling of dependencies without regard to their distance inthe input or output sequences [2, 16]. In all but a few cases [22], however, such attention mechanismsare used in conjunction with a recurrent network.",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "8feaae9b-770c-4ed2-ae8c-82f3f6d54d3d",
      "heading": "In this work we propose the Transformer, a model architecture eschewing recurrence and insteadrelying entirely on an attention mechanism to draw global dependencies between input and output.The Transformer allows for signiﬁcantly more parallelization and can reach a new state of the art intranslation quality after being trained for as little as twelve hours on eight P100 GPUs.",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "0602c706-1b69-448f-a40c-076f16970061",
      "heading": "2Background",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "905035f0-d1d4-4d18-b539-1cbfd75a5ce0",
      "heading": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic buildingblock, computing hidden representations in parallel for all input and output positions. In these models,the number of operations required to relate signals from two arbitrary input or output positions growsin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makesit more difﬁcult to learn dependencies between distant positions [11]. In the Transformer this isreduced to a constant number of operations, albeit at the cost of reduced effective resolution dueto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention asdescribed in section 3.2.",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "708897c2-794f-45c2-8e1a-54446636d8ca",
      "heading": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positionsof a single sequence in order to compute a representation of the sequence. Self-attention has beenused successfully in a variety of tasks including reading comprehension, abstractive summarization,textual entailment and learning task-independent sentence representations [4, 22, 23, 19].",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "4c6e1972-45fb-4721-b559-7a6b3e577b7e",
      "heading": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering andlanguage modeling tasks [28].",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "5a3a8919-6190-48c4-a837-489775f676b5",
      "heading": "To the best of our knowledge, however, the Transformer is the ﬁrst transduction model relyingentirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivateself-attention and discuss its advantages over models such as [14, 15] and [8].",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "9e6377e1-49a6-4d36-acaa-6e3e1c74da16",
      "heading": "3Model Architecture",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "b0e07b49-e39e-4a3f-8e67-da95d93e55e5",
      "heading": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 29].Here, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequenceof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an outputsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive[9], consuming the previously generated symbols as additional input when generating the next.",
      "text": "",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "3f9b98d0-8f48-4473-a762-c118c4db6db1",
      "heading": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fullyconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,respectively.",
      "text": "3.1Encoder and Decoder Stacks",
      "start_page": 2,
      "end_page": 2
    },
    {
      "section_id": "c773b878-ea9e-4107-b887-a8cb7a1390b2",
      "heading": "Encoder:The encoder is composed of a stack of N = 6 identical layers. Each layer has twosub-layers. The ﬁrst is a multi-head self-attention mechanism, and the second is a simple, position-",
      "text": "2\n\nFigure 1: The Transformer - model architecture.",
      "start_page": 2,
      "end_page": 3
    },
    {
      "section_id": "8bcf091b-d3c9-4afb-bf69-94186283c9f8",
      "heading": "wise fully connected feed-forward network. We employ a residual connection [10] around each ofthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer isLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layeritself. To facilitate these residual connections, all sub-layers in the model, as well as the embeddinglayers, produce outputs of dimension dmodel = 512.",
      "text": "",
      "start_page": 3,
      "end_page": 3
    },
    {
      "section_id": "a7973d17-28c6-42f1-ab4f-532aee62b7ce",
      "heading": "Decoder:The decoder is also composed of a stack of N = 6 identical layers. In addition to the twosub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-headattention over the output of the encoder stack. Similar to the encoder, we employ residual connectionsaround each of the sub-layers, followed by layer normalization. We also modify the self-attentionsub-layer in the decoder stack to prevent positions from attending to subsequent positions. Thismasking, combined with fact that the output embeddings are offset by one position, ensures that thepredictions for position i can depend only on the known outputs at positions less than i.",
      "text": "3.2Attention\n\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,where the query, keys, values, and output are all vectors. The output is computed as a weighted sumof the values, where the weight assigned to each value is computed by a compatibility function of thequery with the corresponding key.\n\n3.2.1Scaled Dot-Product Attention",
      "start_page": 3,
      "end_page": 3
    },
    {
      "section_id": "d7a0b3cb-5fe3-42c3-b6b4-92dc49e36f24",
      "heading": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists ofqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the",
      "text": "3\n\nScaled Dot-Product Attention\n\nMulti-Head Attention",
      "start_page": 3,
      "end_page": 4
    },
    {
      "section_id": "7245c2f8-469c-4e39-b025-b8c6304d958d",
      "heading": "Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of severalattention layers running in parallel.",
      "text": "query with all keys, divide each by √dk, and apply a softmax function to obtain the weights on thevalues.",
      "start_page": 4,
      "end_page": 4
    },
    {
      "section_id": "2f18f1f2-9358-4320-a934-ee8a6dd846a1",
      "heading": "In practice, we compute the attention function on a set of queries simultaneously, packed togetherinto a matrix Q. The keys and values are also packed together into matrices K and V . We computethe matrix of outputs as:",
      "text": "Attention(Q, K, V ) = softmax(QKT\n\n√dk)V(1)",
      "start_page": 4,
      "end_page": 4
    },
    {
      "section_id": "f835dcfc-92e7-425a-9af1-e271c6ba2942",
      "heading": "The two most commonly used attention functions are additive attention [2], and dot-product (multi-plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factorof1√dk . Additive attention computes the compatibility function using a feed-forward network witha single hidden layer. While the two are similar in theoretical complexity, dot-product attention ismuch faster and more space-efﬁcient in practice, since it can be implemented using highly optimizedmatrix multiplication code.",
      "text": "While for small values of dk the two mechanisms perform similarly, additive attention outperformsdot product attention without scaling for larger values of dk [3]. We suspect that for large values ofdk, the dot products grow large in magnitude, pushing the softmax function into regions where it hasextremely small gradients 4. To counteract this effect, we scale the dot products by1√dk .\n\n3.2.2Multi-Head Attention",
      "start_page": 4,
      "end_page": 4
    },
    {
      "section_id": "836f4360-c741-4aa2-86f8-e0b1830f250a",
      "heading": "Instead of performing a single attention function with dmodel-dimensional keys, values and queries,we found it beneﬁcial to linearly project the queries, keys and values h times with different, learnedlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions ofqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensionaloutput values. These are concatenated and once again projected, resulting in the ﬁnal values, asdepicted in Figure 2.",
      "text": "Multi-head attention allows the model to jointly attend to information from different representationsubspaces at different positions. With a single attention head, averaging inhibits this.\n\n4To illustrate why the dot products get large, assume that the components of q and k are independent randomvariables with mean 0 and variance 1. Then their dot product, q · k = Pdki=1 qiki, has mean 0 and variance dk.\n\n4\n\nMultiHead(Q, K, V ) = Concat(head1, ..., headh)W O\n\nwhere headi = Attention(QW Qi , KW Ki , V W Vi )\n\nWhere the projections are parameter matrices W Qi∈Rdmodel×dk, W Ki∈Rdmodel×dk, W Vi∈Rdmodel×dvand W O ∈Rhdv×dmodel.",
      "start_page": 4,
      "end_page": 5
    },
    {
      "section_id": "bb7b742d-5435-46e1-bac7-41e880d0b5b4",
      "heading": "In this work we employ h = 8 parallel attention layers, or heads. For each of these we usedk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational costis similar to that of single-head attention with full dimensionality.",
      "text": "3.2.3Applications of Attention in our Model\n\nThe Transformer uses multi-head attention in three different ways:",
      "start_page": 5,
      "end_page": 5
    },
    {
      "section_id": "60ff668d-c347-481c-aa31-1764dfb7bcb8",
      "heading": "• In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,and the memory keys and values come from the output of the encoder. This allows everyposition in the decoder to attend over all positions in the input sequence. This mimics thetypical encoder-decoder attention mechanisms in sequence-to-sequence models such as[31, 2, 8].• The encoder contains self-attention layers. In a self-attention layer all of the keys, valuesand queries come from the same place, in this case, the output of the previous layer in theencoder. Each position in the encoder can attend to all positions in the previous layer of theencoder.• Similarly, self-attention layers in the decoder allow each position in the decoder to attend toall positions in the decoder up to and including that position. We need to prevent leftwardinformation ﬂow in the decoder to preserve the auto-regressive property. We implement thisinside of scaled dot-product attention by masking out (setting to −∞) all values in the inputof the softmax which correspond to illegal connections. See Figure 2.",
      "text": "3.3Position-wise Feed-Forward Networks",
      "start_page": 5,
      "end_page": 5
    },
    {
      "section_id": "610eddb9-320c-4be1-bdc2-011376e5febd",
      "heading": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fullyconnected feed-forward network, which is applied to each position separately and identically. Thisconsists of two linear transformations with a ReLU activation in between.",
      "text": "FFN(x) = max(0, xW1 + b1)W2 + b2(2)",
      "start_page": 5,
      "end_page": 5
    },
    {
      "section_id": "61bdbf27-f9ec-4d44-9f9c-bfc7607bdb55",
      "heading": "While the linear transformations are the same across different positions, they use different parametersfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.The dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionalitydff = 2048.",
      "text": "3.4Embeddings and Softmax",
      "start_page": 5,
      "end_page": 5
    },
    {
      "section_id": "b095ce09-baf0-4ace-a1b1-f21c6f2de42f",
      "heading": "Similarly to other sequence transduction models, we use learned embeddings to convert the inputtokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-mation and softmax function to convert the decoder output to predicted next-token probabilities. Inour model, we share the same weight matrix between the two embedding layers and the pre-softmaxlinear transformation, similar to [24]. In the embedding layers, we multiply those weights by √dmodel.",
      "text": "3.5Positional Encoding",
      "start_page": 5,
      "end_page": 5
    },
    {
      "section_id": "f3192273-ade1-4c69-8774-ee79ccabac16",
      "heading": "Since our model contains no recurrence and no convolution, in order for the model to make use of theorder of the sequence, we must inject some information about the relative or absolute position of thetokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the",
      "text": "5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operationsfor different layer types. n is the sequence length, d is the representation dimension, k is the kernelsize of convolutions and r the size of the neighborhood in restricted self-attention.\n\nLayer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO(n2 · d)O(1)O(1)RecurrentO(n · d2)O(n)O(n)ConvolutionalO(k · n · d2)O(1)O(logk(n))Self-Attention (restricted)O(r · n · d)O(1)O(n/r)\n\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodelas the embeddings, so that the two can be summed. There are many choices of positional encodings,learned and ﬁxed [8].\n\nIn this work, we use sine and cosine functions of different frequencies:\n\nPE(pos,2i) = sin(pos/100002i/dmodel)\n\nPE(pos,2i+1) = cos(pos/100002i/dmodel)",
      "start_page": 5,
      "end_page": 6
    },
    {
      "section_id": "0f6414c6-8684-42fa-9b66-7b41f903c9db",
      "heading": "where pos is the position and i is the dimension. That is, each dimension of the positional encodingcorresponds to a sinusoid. The wavelengths form a geometric progression from 2π to 10000 · 2π. Wechose this function because we hypothesized it would allow the model to easily learn to attend byrelative positions, since for any ﬁxed offset k, PEpos+k can be represented as a linear function ofPEpos.",
      "text": "",
      "start_page": 6,
      "end_page": 6
    },
    {
      "section_id": "22a91842-99ef-4c39-a064-fbfb429fdd04",
      "heading": "We also experimented with using learned positional embeddings [8] instead, and found that the twoversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal versionbecause it may allow the model to extrapolate to sequence lengths longer than the ones encounteredduring training.",
      "text": "",
      "start_page": 6,
      "end_page": 6
    },
    {
      "section_id": "86c23f47-c1e3-4889-aa93-54520ef3340f",
      "heading": "4Why Self-Attention",
      "text": "",
      "start_page": 6,
      "end_page": 6
    },
    {
      "section_id": "df3701cd-7ec5-4e32-b205-6b931beaed40",
      "heading": "In this section we compare various aspects of self-attention layers to the recurrent and convolu-tional layers commonly used for mapping one variable-length sequence of symbol representations(x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi ∈Rd, such as a hiddenlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention weconsider three desiderata.",
      "text": "One is the total computational complexity per layer. Another is the amount of computation that canbe parallelized, as measured by the minimum number of sequential operations required.",
      "start_page": 6,
      "end_page": 6
    },
    {
      "section_id": "86910628-4cb5-426e-a0cc-ebee1b022e67",
      "heading": "The third is the path length between long-range dependencies in the network. Learning long-rangedependencies is a key challenge in many sequence transduction tasks. One key factor affecting theability to learn such dependencies is the length of the paths forward and backward signals have totraverse in the network. The shorter these paths between any combination of positions in the inputand output sequences, the easier it is to learn long-range dependencies [11]. Hence we also comparethe maximum path length between any two input and output positions in networks composed of thedifferent layer types.",
      "text": "",
      "start_page": 6,
      "end_page": 6
    },
    {
      "section_id": "c054801c-95ac-49c6-ac0c-769e8aa5d71b",
      "heading": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentiallyexecuted operations, whereas a recurrent layer requires O(n) sequential operations. In terms ofcomputational complexity, self-attention layers are faster than recurrent layers when the sequencelength n is smaller than the representation dimensionality d, which is most often the case withsentence representations used by state-of-the-art models in machine translations, such as word-piece[31] and byte-pair [25] representations. To improve computational performance for tasks involvingvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in",
      "text": "6\n\nthe input sequence centered around the respective output position. This would increase the maximumpath length to O(n/r). We plan to investigate this approach further in future work.",
      "start_page": 6,
      "end_page": 7
    },
    {
      "section_id": "84dfab4c-eab1-446d-ad9a-2cc997faeea3",
      "heading": "A single convolutional layer with kernel width k < n does not connect all pairs of input and outputpositions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels,or O(logk(n)) in the case of dilated convolutions [15], increasing the length of the longest pathsbetween any two positions in the network. Convolutional layers are generally more expensive thanrecurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexityconsiderably, to O(k · n · d + n · d2). Even with k = n, however, the complexity of a separableconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,the approach we take in our model.",
      "text": "As side beneﬁt, self-attention could yield more interpretable models. We inspect attention distributionsfrom our models and present and discuss examples in the appendix. Not only do individual attentionheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntacticand semantic structure of the sentences.",
      "start_page": 7,
      "end_page": 7
    },
    {
      "section_id": "ed76cd5b-2788-450a-a1d0-8de5b60812a5",
      "heading": "5Training",
      "text": "This section describes the training regime for our models.\n\n5.1Training Data and Batching",
      "start_page": 7,
      "end_page": 7
    },
    {
      "section_id": "dbe23fbf-f39c-4e11-998d-5a81ae3d900c",
      "heading": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 millionsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the signiﬁcantly larger WMT2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piecevocabulary [31]. Sentence pairs were batched together by approximate sequence length. Each trainingbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000target tokens.",
      "text": "5.2Hardware and Schedule",
      "start_page": 7,
      "end_page": 7
    },
    {
      "section_id": "29f49583-303f-4dd7-9a6e-3ea8fccc91f4",
      "heading": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models usingthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. Wetrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on thebottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps(3.5 days).",
      "text": "5.3Optimizer\n\nWe used the Adam optimizer [17] with β1 = 0.9, β2 = 0.98 and ϵ = 10−9. We varied the learningrate over the course of training, according to the formula:\n\nlrate = d−0.5model · min(step_num−0.5, step_num · warmup_steps−1.5)(3)",
      "start_page": 7,
      "end_page": 7
    },
    {
      "section_id": "ed36430e-42a3-4da9-a9f7-f93a7ac5fd47",
      "heading": "This corresponds to increasing the learning rate linearly for the ﬁrst warmup_steps training steps,and decreasing it thereafter proportionally to the inverse square root of the step number. We usedwarmup_steps = 4000.",
      "text": "5.4Regularization\n\nWe employ three types of regularization during training:",
      "start_page": 7,
      "end_page": 7
    },
    {
      "section_id": "02e99b23-e96d-4fb5-98f3-90192630004b",
      "heading": "Residual DropoutWe apply dropout [27] to the output of each sub-layer, before it is added to thesub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and thepositional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPdrop = 0.1.",
      "text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on theEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n\nModelBLEUTraining Cost (FLOPs)\n\nEN-DEEN-FREN-DEEN-FRByteNet [15]23.75Deep-Att + PosUnk [32]39.21.0 · 1020\n\nGNMT + RL [31]24.639.922.3 · 10191.4 · 1020\n\nConvS2S [8]25.1640.469.6 · 10181.5 · 1020\n\nMoE [26]26.0340.562.0 · 10191.2 · 1020\n\nDeep-Att + PosUnk Ensemble [32]40.48.0 · 1020\n\nGNMT + RL Ensemble [31]26.3041.161.8 · 10201.1 · 1021\n\nConvS2S Ensemble [8]26.3641.297.7 · 10191.2 · 1021\n\nTransformer (base model)27.338.13.3 · 1018\n\nTransformer (big)28.441.02.3 · 1019",
      "start_page": 7,
      "end_page": 8
    },
    {
      "section_id": "f7ae923f-bfb3-47d2-bcb2-65c2077f6f0b",
      "heading": "Label SmoothingDuring training, we employed label smoothing of value ϵls = 0.1 [30]. Thishurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
      "text": "",
      "start_page": 8,
      "end_page": 8
    },
    {
      "section_id": "aa7d1475-90bc-49f7-a466-76de8f5bbc5a",
      "heading": "6Results",
      "text": "6.1Machine Translation\n\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0BLEU, establishing a new state-of-the-art BLEU score of 28.4. The conﬁguration of this model islisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base modelsurpasses all previously published models and ensembles, at a fraction of the training cost of any ofthe competitive models.",
      "start_page": 8,
      "end_page": 8
    },
    {
      "section_id": "3a193314-a9f4-4ff8-99d5-a8f4db27ee25",
      "heading": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,outperforming all of the previously published single models, at less than 1/4 the training cost of theprevious state-of-the-art model. The Transformer (big) model trained for English-to-French useddropout rate Pdrop = 0.1, instead of 0.3.",
      "text": "",
      "start_page": 8,
      "end_page": 8
    },
    {
      "section_id": "18864439-1ed2-4ffe-945e-f31269e34795",
      "heading": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, whichwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. Weused beam search with a beam size of 4 and length penalty α = 0.6 [31]. These hyperparameterswere chosen after experimentation on the development set. We set the maximum output length duringinference to input length + 50, but terminate early when possible [31].",
      "text": "Table 2 summarizes our results and compares our translation quality and training costs to other modelarchitectures from the literature. We estimate the number of ﬂoating point operations used to train amodel by multiplying the training time, the number of GPUs used, and an estimate of the sustainedsingle-precision ﬂoating-point capacity of each GPU 5.\n\n6.2Model Variations",
      "start_page": 8,
      "end_page": 8
    },
    {
      "section_id": "cc2e5722-5227-43c1-884d-39a0bf3b628d",
      "heading": "To evaluate the importance of different components of the Transformer, we varied our base modelin different ways, measuring the change in performance on English-to-German translation on thedevelopment set, newstest2013. We used beam search as described in the previous section, but nocheckpoint averaging. We present these results in Table 3.",
      "text": "",
      "start_page": 8,
      "end_page": 8
    },
    {
      "section_id": "063f1699-1f98-4ea1-8417-f1d6752252ee",
      "heading": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,keeping the amount of computation constant, as described in Section 3.2.2. While single-headattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.",
      "text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n\n8\n\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the basemodel. All metrics are on the English-to-German translation development set, newstest2013. Listedperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared toper-word perplexities.\n\nNdmodeldffhdkdvPdropϵlstrainPPLBLEUparamssteps(dev)(dev)×106\n\nbase65122048864640.10.1100K4.9225.865\n\n(A)\n\n15125125.2924.941281285.0025.51632324.9125.83216165.0125.4\n\n(B)165.1625.158325.0125.460\n\n(C)\n\n26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290\n\n(D)\n\n0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213",
      "start_page": 8,
      "end_page": 9
    },
    {
      "section_id": "e7eed40b-a57d-400b-923f-df2b378297d9",
      "heading": "In Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. Thissuggests that determining compatibility is not easy and that a more sophisticated compatibilityfunction than dot product may be beneﬁcial. We further observe in rows (C) and (D) that, as expected,bigger models are better, and dropout is very helpful in avoiding over-ﬁtting. In row (E) we replace oursinusoidal positional encoding with learned positional embeddings [8], and observe nearly identicalresults to the base model.",
      "text": "",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "a8f0611c-08fb-4015-8a03-4142ee388094",
      "heading": "7Conclusion",
      "text": "In this work, we presented the Transformer, the ﬁrst sequence transduction model based entirely onattention, replacing the recurrent layers most commonly used in encoder-decoder architectures withmulti-headed self-attention.",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "34b43921-44fc-42a6-9b77-2466a35f7521",
      "heading": "For translation tasks, the Transformer can be trained signiﬁcantly faster than architectures basedon recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014English-to-French translation tasks, we achieve a new state of the art. In the former task our bestmodel outperforms even all previously reported ensembles.",
      "text": "",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "1bcaa653-fbcc-48aa-b124-49d4beb13661",
      "heading": "We are excited about the future of attention-based models and plan to apply them to other tasks. Weplan to extend the Transformer to problems involving input and output modalities other than text andto investigate local, restricted attention mechanisms to efﬁciently handle large inputs and outputssuch as images, audio and video. Making generation less sequential is another research goals of ours.",
      "text": "",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "f8fad02d-502c-4b3c-bb4a-8ce7f6465fca",
      "heading": "The code we used to train and evaluate our models is available at https://github.com/tensorflow/tensor2tensor.",
      "text": "",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "0ef11df8-874c-4dea-b91c-1e978aa8cb8e",
      "heading": "AcknowledgementsWe are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitfulcomments, corrections and inspiration.",
      "text": "9",
      "start_page": 9,
      "end_page": 9
    },
    {
      "section_id": "8edc9ffc-835d-4878-b80b-4964e336a2e6",
      "heading": "References",
      "text": "[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprintarXiv:1607.06450, 2016.\n\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointlylearning to align and translate. CoRR, abs/1409.0473, 2014.\n\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neuralmachine translation architectures. CoRR, abs/1703.03906, 2017.\n\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machinereading. arXiv preprint arXiv:1601.06733, 2016.",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "9cec5482-92a3-402e-a0ba-a74a9f5581d0",
      "heading": "[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statisticalmachine translation. CoRR, abs/1406.1078, 2014.",
      "text": "",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "3a69dd54-7cef-464d-a9cc-b813c7d3734d",
      "heading": "[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXivpreprint arXiv:1610.02357, 2016.",
      "text": "[7] Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluationof gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.\n\n[8] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2, 2017.",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "196aeed3-fc6c-44ff-8297-765d95839b73",
      "heading": "[9] Alex Graves.Generating sequences with recurrent neural networks.arXiv preprintarXiv:1308.0850, 2013.",
      "text": "",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "efef1f30-7a9e-4339-af60-bdc30bb7a22e",
      "heading": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-age recognition. In Proceedings of the IEEE Conference on Computer Vision and PatternRecognition, pages 770–778, 2016.",
      "text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient ﬂow inrecurrent nets: the difﬁculty of learning long-term dependencies, 2001.",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "ff0a33d5-bc83-4f17-85ff-265be189d6fc",
      "heading": "[12] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation,9(8):1735–1780, 1997.",
      "text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploringthe limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.\n\n[14] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conferenceon Learning Representations (ICLR), 2016.\n\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-ray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2,2017.\n\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.In International Conference on Learning Representations, 2017.\n\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprintarXiv:1703.10722, 2017.",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "042f0c62-9e29-4a74-823f-99c60f270ac6",
      "heading": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, BowenZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprintarXiv:1703.03130, 2017.",
      "text": "",
      "start_page": 10,
      "end_page": 10
    },
    {
      "section_id": "aed7f02c-42d0-481a-ba81-dc02f8bd91fa",
      "heading": "[20] Samy Bengio Łukasz Kaiser. Can active memory replace attention? In Advances in NeuralInformation Processing Systems, (NIPS), 2016.",
      "text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.\n\n[22] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attentionmodel. In Empirical Methods in Natural Language Processing, 2016.\n\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractivesummarization. arXiv preprint arXiv:1705.04304, 2017.",
      "start_page": 10,
      "end_page": 11
    },
    {
      "section_id": "7ab7c11c-958c-4870-adcd-5079d038ca92",
      "heading": "[24] Oﬁr Press and Lior Wolf. Using the output embedding to improve language models. arXivpreprint arXiv:1608.05859, 2016.",
      "text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare wordswith subword units. arXiv preprint arXiv:1508.07909, 2015.",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "727fbe07-299b-4e0b-a1a4-02c014b1bbec",
      "heading": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-expertslayer. arXiv preprint arXiv:1701.06538, 2017.",
      "text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-nov. Dropout: a simple way to prevent neural networks from overﬁtting. Journal of MachineLearning Research, 15(1):1929–1958, 2014.",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "8969e54b-5ebc-4b2a-a47e-9d0246316395",
      "heading": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memorynetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,Advances in Neural Information Processing Systems 28, pages 2440–2448. Curran Associates,Inc., 2015.",
      "text": "",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "850f4b97-beeb-4c71-a2f6-00eb892989b6",
      "heading": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neuralnetworks. In Advances in Neural Information Processing Systems, pages 3104–3112, 2014.",
      "text": "",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "5287bee9-e78c-4199-8b81-863446513bbd",
      "heading": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.Rethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.",
      "text": "",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "f65bdd49-b8f2-4928-98ca-c2d3e8f1a41d",
      "heading": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, WolfgangMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machinetranslation system: Bridging the gap between human and machine translation. arXiv preprintarXiv:1609.08144, 2016.",
      "text": "",
      "start_page": 11,
      "end_page": 11
    },
    {
      "section_id": "e93621e3-2587-4d5c-8646-16f1a80696bc",
      "heading": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models withfast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.",
      "text": "11",
      "start_page": 11,
      "end_page": 11
    }
  ],
  "tables": [
    {
      "table_id": "c844f681-ebe2-414f-b0ad-a85b9f398e22",
      "page": 9,
      "csv_path": "data\\processed\\tables\\attention_is_all_you_need_Paper_p9_table1.csv",
      "rows": 8,
      "cols": 1,
      "raw": [
        [
          "train\nN d d h d d P (cid:15)\nmodel ff k v drop ls steps"
        ],
        [
          "6 512 2048 8 64 64 0.1 0.1 100K"
        ],
        [
          "1 512 512\n4 128 128\n16 32 32\n32 16 16"
        ],
        [
          "16\n32"
        ],
        [
          "2\n4\n8\n256 32 32\n1024 128 128\n1024\n4096"
        ],
        [
          "0.0\n0.2\n0.0\n0.2"
        ],
        [
          "positionalembeddinginsteadofsinusoids"
        ],
        [
          "6 1024 4096 16 0.3 300K"
        ]
      ]
    }
  ],
  "figures": [
    {
      "image_id": "d2edbd39-7f4a-4f14-82f6-d4433ad910e2",
      "page": 3,
      "path": "data\\processed\\images\\attention_is_all_you_need_Paper_p3_img1.png",
      "ext": "png",
      "width": 1520,
      "height": 2239
    },
    {
      "image_id": "3c895615-92d5-4e40-bab6-69ffcc1bce33",
      "page": 4,
      "path": "data\\processed\\images\\attention_is_all_you_need_Paper_p4_img1.png",
      "ext": "png",
      "width": 835,
      "height": 1282
    },
    {
      "image_id": "5031bc16-a028-4e28-b6c4-560db8a8e83c",
      "page": 4,
      "path": "data\\processed\\images\\attention_is_all_you_need_Paper_p4_img2.png",
      "ext": "png",
      "width": 445,
      "height": 884
    }
  ],
  "references": "[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprintarXiv:1607.06450, 2016.\n\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointlylearning to align and translate. CoRR, abs/1409.0473, 2014.\n\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neuralmachine translation architectures. CoRR, abs/1703.03906, 2017.\n\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machinereading. arXiv preprint arXiv:1601.06733, 2016.\n\n[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statisticalmachine translation. CoRR, abs/1406.1078, 2014.\n\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXivpreprint arXiv:1610.02357, 2016.\n\n[7] Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluationof gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.\n\n[8] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2, 2017.\n\n[9] Alex Graves.Generating sequences with recurrent neural networks.arXiv preprintarXiv:1308.0850, 2013.\n\n[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-age recognition. In Proceedings of the IEEE Conference on Computer Vision and PatternRecognition, pages 770–778, 2016.\n\n[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient ﬂow inrecurrent nets: the difﬁculty of learning long-term dependencies, 2001.\n\n[12] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation,9(8):1735–1780, 1997.\n\n[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploringthe limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.\n\n[14] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conferenceon Learning Representations (ICLR), 2016.\n\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-ray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2,2017.\n\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.In International Conference on Learning Representations, 2017.\n\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprintarXiv:1703.10722, 2017.\n\n[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, BowenZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprintarXiv:1703.03130, 2017.\n\n[20] Samy Bengio Łukasz Kaiser. Can active memory replace attention? In Advances in NeuralInformation Processing Systems, (NIPS), 2016.\n\n10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.\n\n[22] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attentionmodel. In Empirical Methods in Natural Language Processing, 2016.\n\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractivesummarization. arXiv preprint arXiv:1705.04304, 2017.\n\n[24] Oﬁr Press and Lior Wolf. Using the output embedding to improve language models. arXivpreprint arXiv:1608.05859, 2016.\n\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare wordswith subword units. arXiv preprint arXiv:1508.07909, 2015.\n\n[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-expertslayer. arXiv preprint arXiv:1701.06538, 2017.\n\n[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-nov. Dropout: a simple way to prevent neural networks from overﬁtting. Journal of MachineLearning Research, 15(1):1929–1958, 2014.\n\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memorynetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,Advances in Neural Information Processing Systems 28, pages 2440–2448. Curran Associates,Inc., 2015.\n\n[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neuralnetworks. In Advances in Neural Information Processing Systems, pages 3104–3112, 2014.\n\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.Rethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.\n\n[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, WolfgangMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machinetranslation system: Bridging the gap between human and machine translation. arXiv preprintarXiv:1609.08144, 2016.\n\n[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models withfast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.\n\n11",
  "raw_text": "Attention Is All You Need\n\nAshish Vaswani∗Google Brainavaswani@google.com\n\nNoam Shazeer∗Google Brainnoam@google.com\n\nNiki Parmar∗Google Researchnikip@google.com\n\nJakob Uszkoreit∗Google Researchusz@google.com\n\nLlion Jones∗Google Researchllion@google.com\n\nAidan N. Gomez∗†University of Torontoaidan@cs.toronto.edu\n\nŁukasz Kaiser∗Google Brainlukaszkaiser@google.com\n\nIllia Polosukhin∗‡illia.polosukhin@gmail.com\n\nAbstract\n\nThe dominant sequence transduction models are based on complex recurrent orconvolutional neural networks that include an encoder and a decoder. The bestperforming models also connect the encoder and decoder through an attentionmechanism. We propose a new simple network architecture, the Transformer,based solely on attention mechanisms, dispensing with recurrence and convolutionsentirely. Experiments on two machine translation tasks show these models tobe superior in quality while being more parallelizable and requiring signiﬁcantlyless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, includingensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,our model establishes a new single-model state-of-the-art BLEU score of 41.0 aftertraining for 3.5 days on eight GPUs, a small fraction of the training costs of thebest models from the literature.\n\n1Introduction\n\nRecurrent neural networks, long short-term memory [12] and gated recurrent [7] neural networksin particular, have been ﬁrmly established as state of the art approaches in sequence modeling andtransduction problems such as language modeling and machine translation [29, 2, 5]. Numerousefforts have since continued to push the boundaries of recurrent language models and encoder-decoderarchitectures [31, 21, 13].\n\n∗Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and startedthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the ﬁrst Transformer models andhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-headattention and the parameter-free position representation and became the other person involved in nearly everydetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase andtensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, andefﬁcient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of andimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively acceleratingour research.†Work performed while at Google Brain.‡Work performed while at Google Research.\n\n31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\nRecurrent models typically factor computation along the symbol positions of the input and outputsequences. Aligning the positions to steps in computation time, they generate a sequence of hiddenstates ht, as a function of the previous hidden state ht−1 and the input for position t. This inherentlysequential nature precludes parallelization within training examples, which becomes critical at longersequence lengths, as memory constraints limit batching across examples. Recent work has achievedsigniﬁcant improvements in computational efﬁciency through factorization tricks [18] and conditionalcomputation [26], while also improving model performance in case of the latter. The fundamentalconstraint of sequential computation, however, remains.\n\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-tion models in various tasks, allowing modeling of dependencies without regard to their distance inthe input or output sequences [2, 16]. In all but a few cases [22], however, such attention mechanismsare used in conjunction with a recurrent network.\n\nIn this work we propose the Transformer, a model architecture eschewing recurrence and insteadrelying entirely on an attention mechanism to draw global dependencies between input and output.The Transformer allows for signiﬁcantly more parallelization and can reach a new state of the art intranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n\n2Background\n\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[20], ByteNet [15] and ConvS2S [8], all of which use convolutional neural networks as basic buildingblock, computing hidden representations in parallel for all input and output positions. In these models,the number of operations required to relate signals from two arbitrary input or output positions growsin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makesit more difﬁcult to learn dependencies between distant positions [11]. In the Transformer this isreduced to a constant number of operations, albeit at the cost of reduced effective resolution dueto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention asdescribed in section 3.2.\n\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positionsof a single sequence in order to compute a representation of the sequence. Self-attention has beenused successfully in a variety of tasks including reading comprehension, abstractive summarization,textual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering andlanguage modeling tasks [28].\n\nTo the best of our knowledge, however, the Transformer is the ﬁrst transduction model relyingentirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivateself-attention and discuss its advantages over models such as [14, 15] and [8].\n\n3Model Architecture\n\nMost competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 29].Here, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequenceof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an outputsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive[9], consuming the previously generated symbols as additional input when generating the next.\n\nThe Transformer follows this overall architecture using stacked self-attention and point-wise, fullyconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,respectively.\n\n3.1Encoder and Decoder Stacks\n\nEncoder:The encoder is composed of a stack of N = 6 identical layers. Each layer has twosub-layers. The ﬁrst is a multi-head self-attention mechanism, and the second is a simple, position-\n\n2\n\nFigure 1: The Transformer - model architecture.\n\nwise fully connected feed-forward network. We employ a residual connection [10] around each ofthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer isLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layeritself. To facilitate these residual connections, all sub-layers in the model, as well as the embeddinglayers, produce outputs of dimension dmodel = 512.\n\nDecoder:The decoder is also composed of a stack of N = 6 identical layers. In addition to the twosub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-headattention over the output of the encoder stack. Similar to the encoder, we employ residual connectionsaround each of the sub-layers, followed by layer normalization. We also modify the self-attentionsub-layer in the decoder stack to prevent positions from attending to subsequent positions. Thismasking, combined with fact that the output embeddings are offset by one position, ensures that thepredictions for position i can depend only on the known outputs at positions less than i.\n\n3.2Attention\n\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,where the query, keys, values, and output are all vectors. The output is computed as a weighted sumof the values, where the weight assigned to each value is computed by a compatibility function of thequery with the corresponding key.\n\n3.2.1Scaled Dot-Product Attention\n\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists ofqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\n\n3\n\nScaled Dot-Product Attention\n\nMulti-Head Attention\n\nFigure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of severalattention layers running in parallel.\n\nquery with all keys, divide each by √dk, and apply a softmax function to obtain the weights on thevalues.\n\nIn practice, we compute the attention function on a set of queries simultaneously, packed togetherinto a matrix Q. The keys and values are also packed together into matrices K and V . We computethe matrix of outputs as:\n\nAttention(Q, K, V ) = softmax(QKT\n\n√dk)V(1)\n\nThe two most commonly used attention functions are additive attention [2], and dot-product (multi-plicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factorof1√dk . Additive attention computes the compatibility function using a feed-forward network witha single hidden layer. While the two are similar in theoretical complexity, dot-product attention ismuch faster and more space-efﬁcient in practice, since it can be implemented using highly optimizedmatrix multiplication code.\n\nWhile for small values of dk the two mechanisms perform similarly, additive attention outperformsdot product attention without scaling for larger values of dk [3]. We suspect that for large values ofdk, the dot products grow large in magnitude, pushing the softmax function into regions where it hasextremely small gradients 4. To counteract this effect, we scale the dot products by1√dk .\n\n3.2.2Multi-Head Attention\n\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,we found it beneﬁcial to linearly project the queries, keys and values h times with different, learnedlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions ofqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensionaloutput values. These are concatenated and once again projected, resulting in the ﬁnal values, asdepicted in Figure 2.\n\nMulti-head attention allows the model to jointly attend to information from different representationsubspaces at different positions. With a single attention head, averaging inhibits this.\n\n4To illustrate why the dot products get large, assume that the components of q and k are independent randomvariables with mean 0 and variance 1. Then their dot product, q · k = Pdki=1 qiki, has mean 0 and variance dk.\n\n4\n\nMultiHead(Q, K, V ) = Concat(head1, ..., headh)W O\n\nwhere headi = Attention(QW Qi , KW Ki , V W Vi )\n\nWhere the projections are parameter matrices W Qi∈Rdmodel×dk, W Ki∈Rdmodel×dk, W Vi∈Rdmodel×dvand W O ∈Rhdv×dmodel.\n\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we usedk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational costis similar to that of single-head attention with full dimensionality.\n\n3.2.3Applications of Attention in our Model\n\nThe Transformer uses multi-head attention in three different ways:\n\n• In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,and the memory keys and values come from the output of the encoder. This allows everyposition in the decoder to attend over all positions in the input sequence. This mimics thetypical encoder-decoder attention mechanisms in sequence-to-sequence models such as[31, 2, 8].• The encoder contains self-attention layers. In a self-attention layer all of the keys, valuesand queries come from the same place, in this case, the output of the previous layer in theencoder. Each position in the encoder can attend to all positions in the previous layer of theencoder.• Similarly, self-attention layers in the decoder allow each position in the decoder to attend toall positions in the decoder up to and including that position. We need to prevent leftwardinformation ﬂow in the decoder to preserve the auto-regressive property. We implement thisinside of scaled dot-product attention by masking out (setting to −∞) all values in the inputof the softmax which correspond to illegal connections. See Figure 2.\n\n3.3Position-wise Feed-Forward Networks\n\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fullyconnected feed-forward network, which is applied to each position separately and identically. Thisconsists of two linear transformations with a ReLU activation in between.\n\nFFN(x) = max(0, xW1 + b1)W2 + b2(2)\n\nWhile the linear transformations are the same across different positions, they use different parametersfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.The dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionalitydff = 2048.\n\n3.4Embeddings and Softmax\n\nSimilarly to other sequence transduction models, we use learned embeddings to convert the inputtokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor-mation and softmax function to convert the decoder output to predicted next-token probabilities. Inour model, we share the same weight matrix between the two embedding layers and the pre-softmaxlinear transformation, similar to [24]. In the embedding layers, we multiply those weights by √dmodel.\n\n3.5Positional Encoding\n\nSince our model contains no recurrence and no convolution, in order for the model to make use of theorder of the sequence, we must inject some information about the relative or absolute position of thetokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\n\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operationsfor different layer types. n is the sequence length, d is the representation dimension, k is the kernelsize of convolutions and r the size of the neighborhood in restricted self-attention.\n\nLayer TypeComplexity per LayerSequentialMaximum Path LengthOperationsSelf-AttentionO(n2 · d)O(1)O(1)RecurrentO(n · d2)O(n)O(n)ConvolutionalO(k · n · d2)O(1)O(logk(n))Self-Attention (restricted)O(r · n · d)O(1)O(n/r)\n\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodelas the embeddings, so that the two can be summed. There are many choices of positional encodings,learned and ﬁxed [8].\n\nIn this work, we use sine and cosine functions of different frequencies:\n\nPE(pos,2i) = sin(pos/100002i/dmodel)\n\nPE(pos,2i+1) = cos(pos/100002i/dmodel)\n\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encodingcorresponds to a sinusoid. The wavelengths form a geometric progression from 2π to 10000 · 2π. Wechose this function because we hypothesized it would allow the model to easily learn to attend byrelative positions, since for any ﬁxed offset k, PEpos+k can be represented as a linear function ofPEpos.\n\nWe also experimented with using learned positional embeddings [8] instead, and found that the twoversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal versionbecause it may allow the model to extrapolate to sequence lengths longer than the ones encounteredduring training.\n\n4Why Self-Attention\n\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-tional layers commonly used for mapping one variable-length sequence of symbol representations(x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi ∈Rd, such as a hiddenlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention weconsider three desiderata.\n\nOne is the total computational complexity per layer. Another is the amount of computation that canbe parallelized, as measured by the minimum number of sequential operations required.\n\nThe third is the path length between long-range dependencies in the network. Learning long-rangedependencies is a key challenge in many sequence transduction tasks. One key factor affecting theability to learn such dependencies is the length of the paths forward and backward signals have totraverse in the network. The shorter these paths between any combination of positions in the inputand output sequences, the easier it is to learn long-range dependencies [11]. Hence we also comparethe maximum path length between any two input and output positions in networks composed of thedifferent layer types.\n\nAs noted in Table 1, a self-attention layer connects all positions with a constant number of sequentiallyexecuted operations, whereas a recurrent layer requires O(n) sequential operations. In terms ofcomputational complexity, self-attention layers are faster than recurrent layers when the sequencelength n is smaller than the representation dimensionality d, which is most often the case withsentence representations used by state-of-the-art models in machine translations, such as word-piece[31] and byte-pair [25] representations. To improve computational performance for tasks involvingvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in\n\n6\n\nthe input sequence centered around the respective output position. This would increase the maximumpath length to O(n/r). We plan to investigate this approach further in future work.\n\nA single convolutional layer with kernel width k < n does not connect all pairs of input and outputpositions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels,or O(logk(n)) in the case of dilated convolutions [15], increasing the length of the longest pathsbetween any two positions in the network. Convolutional layers are generally more expensive thanrecurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexityconsiderably, to O(k · n · d + n · d2). Even with k = n, however, the complexity of a separableconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,the approach we take in our model.\n\nAs side beneﬁt, self-attention could yield more interpretable models. We inspect attention distributionsfrom our models and present and discuss examples in the appendix. Not only do individual attentionheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntacticand semantic structure of the sentences.\n\n5Training\n\nThis section describes the training regime for our models.\n\n5.1Training Data and Batching\n\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 millionsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the signiﬁcantly larger WMT2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piecevocabulary [31]. Sentence pairs were batched together by approximate sequence length. Each trainingbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000target tokens.\n\n5.2Hardware and Schedule\n\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models usingthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. Wetrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on thebottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps(3.5 days).\n\n5.3Optimizer\n\nWe used the Adam optimizer [17] with β1 = 0.9, β2 = 0.98 and ϵ = 10−9. We varied the learningrate over the course of training, according to the formula:\n\nlrate = d−0.5model · min(step_num−0.5, step_num · warmup_steps−1.5)(3)\n\nThis corresponds to increasing the learning rate linearly for the ﬁrst warmup_steps training steps,and decreasing it thereafter proportionally to the inverse square root of the step number. We usedwarmup_steps = 4000.\n\n5.4Regularization\n\nWe employ three types of regularization during training:\n\nResidual DropoutWe apply dropout [27] to the output of each sub-layer, before it is added to thesub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and thepositional encodings in both the encoder and decoder stacks. For the base model, we use a rate ofPdrop = 0.1.\n\n7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on theEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n\nModelBLEUTraining Cost (FLOPs)\n\nEN-DEEN-FREN-DEEN-FRByteNet [15]23.75Deep-Att + PosUnk [32]39.21.0 · 1020\n\nGNMT + RL [31]24.639.922.3 · 10191.4 · 1020\n\nConvS2S [8]25.1640.469.6 · 10181.5 · 1020\n\nMoE [26]26.0340.562.0 · 10191.2 · 1020\n\nDeep-Att + PosUnk Ensemble [32]40.48.0 · 1020\n\nGNMT + RL Ensemble [31]26.3041.161.8 · 10201.1 · 1021\n\nConvS2S Ensemble [8]26.3641.297.7 · 10191.2 · 1021\n\nTransformer (base model)27.338.13.3 · 1018\n\nTransformer (big)28.441.02.3 · 1019\n\nLabel SmoothingDuring training, we employed label smoothing of value ϵls = 0.1 [30]. Thishurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n\n6Results\n\n6.1Machine Translation\n\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0BLEU, establishing a new state-of-the-art BLEU score of 28.4. The conﬁguration of this model islisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base modelsurpasses all previously published models and ensembles, at a fraction of the training cost of any ofthe competitive models.\n\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,outperforming all of the previously published single models, at less than 1/4 the training cost of theprevious state-of-the-art model. The Transformer (big) model trained for English-to-French useddropout rate Pdrop = 0.1, instead of 0.3.\n\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, whichwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. Weused beam search with a beam size of 4 and length penalty α = 0.6 [31]. These hyperparameterswere chosen after experimentation on the development set. We set the maximum output length duringinference to input length + 50, but terminate early when possible [31].\n\nTable 2 summarizes our results and compares our translation quality and training costs to other modelarchitectures from the literature. We estimate the number of ﬂoating point operations used to train amodel by multiplying the training time, the number of GPUs used, and an estimate of the sustainedsingle-precision ﬂoating-point capacity of each GPU 5.\n\n6.2Model Variations\n\nTo evaluate the importance of different components of the Transformer, we varied our base modelin different ways, measuring the change in performance on English-to-German translation on thedevelopment set, newstest2013. We used beam search as described in the previous section, but nocheckpoint averaging. We present these results in Table 3.\n\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,keeping the amount of computation constant, as described in Section 3.2.2. While single-headattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n\n5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n\n8\n\nTable 3: Variations on the Transformer architecture. Unlisted values are identical to those of the basemodel. All metrics are on the English-to-German translation development set, newstest2013. Listedperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared toper-word perplexities.\n\nNdmodeldffhdkdvPdropϵlstrainPPLBLEUparamssteps(dev)(dev)×106\n\nbase65122048864640.10.1100K4.9225.865\n\n(A)\n\n15125125.2924.941281285.0025.51632324.9125.83216165.0125.4\n\n(B)165.1625.158325.0125.460\n\n(C)\n\n26.1123.73645.1925.35084.8825.58025632325.7524.52810241281284.6626.016810245.1225.45340964.7526.290\n\n(D)\n\n0.05.7724.60.24.9525.50.04.6725.30.25.4725.7(E)positional embedding instead of sinusoids4.9225.7big610244096160.3300K4.3326.4213\n\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. Thissuggests that determining compatibility is not easy and that a more sophisticated compatibilityfunction than dot product may be beneﬁcial. We further observe in rows (C) and (D) that, as expected,bigger models are better, and dropout is very helpful in avoiding over-ﬁtting. In row (E) we replace oursinusoidal positional encoding with learned positional embeddings [8], and observe nearly identicalresults to the base model.\n\n7Conclusion\n\nIn this work, we presented the Transformer, the ﬁrst sequence transduction model based entirely onattention, replacing the recurrent layers most commonly used in encoder-decoder architectures withmulti-headed self-attention.\n\nFor translation tasks, the Transformer can be trained signiﬁcantly faster than architectures basedon recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014English-to-French translation tasks, we achieve a new state of the art. In the former task our bestmodel outperforms even all previously reported ensembles.\n\nWe are excited about the future of attention-based models and plan to apply them to other tasks. Weplan to extend the Transformer to problems involving input and output modalities other than text andto investigate local, restricted attention mechanisms to efﬁciently handle large inputs and outputssuch as images, audio and video. Making generation less sequential is another research goals of ours.\n\nThe code we used to train and evaluate our models is available at https://github.com/tensorflow/tensor2tensor.\n\nAcknowledgementsWe are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitfulcomments, corrections and inspiration.\n\n9\n\nReferences\n\n[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprintarXiv:1607.06450, 2016.\n\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointlylearning to align and translate. CoRR, abs/1409.0473, 2014.\n\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neuralmachine translation architectures. CoRR, abs/1703.03906, 2017.\n\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machinereading. arXiv preprint arXiv:1601.06733, 2016.\n\n[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statisticalmachine translation. CoRR, abs/1406.1078, 2014.\n\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXivpreprint arXiv:1610.02357, 2016.\n\n[7] Junyoung Chung, Çaglar Gülçehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluationof gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.\n\n[8] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-tional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2, 2017.\n\n[9] Alex Graves.Generating sequences with recurrent neural networks.arXiv preprintarXiv:1308.0850, 2013.\n\n[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-age recognition. In Proceedings of the IEEE Conference on Computer Vision and PatternRecognition, pages 770–778, 2016.\n\n[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jürgen Schmidhuber. Gradient ﬂow inrecurrent nets: the difﬁculty of learning long-term dependencies, 2001.\n\n[12] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation,9(8):1735–1780, 1997.\n\n[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploringthe limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.\n\n[14] Łukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conferenceon Learning Representations (ICLR), 2016.\n\n[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-ray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2,2017.\n\n[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.In International Conference on Learning Representations, 2017.\n\n[17] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n\n[18] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprintarXiv:1703.10722, 2017.\n\n[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, BowenZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprintarXiv:1703.03130, 2017.\n\n[20] Samy Bengio Łukasz Kaiser. Can active memory replace attention? In Advances in NeuralInformation Processing Systems, (NIPS), 2016.\n\n10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention-based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.\n\n[22] Ankur Parikh, Oscar Täckström, Dipanjan Das, and Jakob Uszkoreit. A decomposable attentionmodel. In Empirical Methods in Natural Language Processing, 2016.\n\n[23] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractivesummarization. arXiv preprint arXiv:1705.04304, 2017.\n\n[24] Oﬁr Press and Lior Wolf. Using the output embedding to improve language models. arXivpreprint arXiv:1608.05859, 2016.\n\n[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare wordswith subword units. arXiv preprint arXiv:1508.07909, 2015.\n\n[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-expertslayer. arXiv preprint arXiv:1701.06538, 2017.\n\n[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-nov. Dropout: a simple way to prevent neural networks from overﬁtting. Journal of MachineLearning Research, 15(1):1929–1958, 2014.\n\n[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. End-to-end memorynetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,Advances in Neural Information Processing Systems 28, pages 2440–2448. Curran Associates,Inc., 2015.\n\n[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neuralnetworks. In Advances in Neural Information Processing Systems, pages 3104–3112, 2014.\n\n[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.Rethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.\n\n[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, WolfgangMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machinetranslation system: Bridging the gap between human and machine translation. arXiv preprintarXiv:1609.08144, 2016.\n\n[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models withfast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.\n\n11",
  "needs_ocr": false
}